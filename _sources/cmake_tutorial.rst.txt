======================================
CMake快速入门：用CMake构建C++项目
======================================

CMake是跨平台（C for Cross）的C++项目构建（Make）工具。

CMake项目的文件结构
====================

.. code-block:: text

    qlib                     - project top directory
    ├── LICENSE              
    ├── README              
    ├── .gitignore          
    ├── CMakeLists.txt       - project level CMakeLists
    ├── include              - project include files, i.e., header files
    |   ├── qlib
    |   |   └── vanilla.h    - header files        
    ├── src                  - source code directory
    |   ├── CMakeLists.txt   - source code CMakeLists
    │   └── vanilla.cpp      - source codes
    ├── test                 - test suites
    │   ├── CMakeLists.txt   - test code CMakeLists
    │   └── test.cpp         - test code
    ├── build                - project build results
    |   ├── debug            - debug version
    └── └── release          - release version

项目级别CMakeLists.txt
=========================

项目级别的CMakeLists.txt定义了整个项目的构建方式，

.. code-block:: cmake

    # cmake 版本要求, always on top of CMakeLists.txt
    cmake_minimum_required(VERSION 3.20)

    # 定义项目, one project can contain multiple targets
    project(qlib LANGUAGES CXX)

    # 设置C++语言标准
    set(CMAKE_CXX_STANDARD 20)
    set(CXX_STANDARD_REQUIRED True)
    set(CMAKE_CXX_EXTENSIONS True)


    # 项目中的所有编译目标(target， 在本项目中指qlib,以及qlibtest) 
    # 都需要依赖qlib的头文件，往项目中增加头文件搜索路径include文件夹
    include_directories(include)

    # 向项目中添加源文件所在的文件夹，每个源文件文件夹中都应包含CMakeLists.txt文件
    add_subdirectory(src)
    add_subdirectory(test)


编译目标的CMakeLists.txt
==========================

定价引擎代码库的CMakeLists.txt

.. code-block:: cmake

    # 用add_library来创建一个qlib的动态链接库(SHARED的含义)，并将所需要的源文件
    # 添加到编译目标中
    add_library(qlib SHARED *.cpp)

    # 添加第三方依赖
    find_package(Boost)
    target_include_directories(qlib PUBLIC ${Boost_INCLUDE_DIR})

测试的CMakeLists.txt

.. code-block:: cmake
    
    # 编译目标为可执行文件，用add_executable
    add_executable(qlibtest test.cpp)
    
    # use google test
    find_package(GTest CONFIG REQUIRED)

    # 需要测试qlib, 既需要动态链接到googletest的测试框架，也需要链接到qlib库（library）
    target_link_libraries(qlibtest PUBLIC GTest::gtest_main qlib)

要点讲解
============

CMake与vcpkg
-------------------
在 `vcpkg的安装 <environment_setup.html#vcpkg>`_ 一节中，我们介绍了如何将vcpkg与CMake进行关联，成功关联以后，CMake就能通过
find_package 命令来找到通过 vcpkg 安装的第三方软件包，比如这里所使用的 **boost** 以及 **googletest**。

第三方库的使用
----------------

target_include_directories, 和 target_link_libraries 命令是向目标添加第三方依赖的两种方式。对于只需要包含头文件(.h)的库，如上述例子中提到的
boost, 可以用target_include_directories， 而对于需要编译后的库文件的，如googletest, 则需要使用target_link_libraries命令。

具体的模块引入形式，可以通过vcpkg， 如引入googletest, 

.. code-block:: console

    liaosong@Liaos-MacBook-Air vcpkg % ./vcpkg install gtest     
    Computing installation plan...
    The following packages are already installed:
    gtest[core]:arm64-osx -> 1.11.0#5
    gtest:arm64-osx is already installed
    Restored 0 package(s) from /Users/liaosong/.cache/vcpkg/archives in 2.167 us. Use --debug to see more details.

    Total elapsed time: 24.22 ms

    gtest provides CMake targets:
        # this is heuristically generated, and may not be correct
        find_package(GTest CONFIG REQUIRED)
        target_link_libraries(main PRIVATE GTest::gmock GTest::gtest GTest::gmock_main GTest::gtest_main)

