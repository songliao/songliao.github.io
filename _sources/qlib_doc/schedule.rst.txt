========================
**Schedule**
========================
.. function:: schedule(const Date& from, const Date& to, const Period& freq, BusinessDayConvention convention, DateGenerationRule rule, const Calendar& cal, bool include_from, bool include_to);

.. container:: custom

    **Parameters:**
        **from: Date**
            | 一个日期对象，表示开始日期。
        **to: Date**
            | 一个日期对象，表示结束日期。
        **freq: Period**
            | 观察频率。
        **convention: BusinessDayConvention**
            | 描述交易日调整规则的分类，详见  :ref:`交易日调整规则 <business_day_convention>` 。
        **rule: DateGenerationRule**
            | 描述日期生成规则的分类。
        **cal: Calendar**
            | 一个日历对象。
        **include_from: bool**
            | **True** or **False**, 是否包含初始日期。
        **include_to: bool**
            | **True** or **False**, 是否包含结束日期。

    **Returns: std::vector<Date>**
        返回给定规则下生成的一组日期。

.. list-table::

 * - **日期生成规则**
   - **定义**
 * - FORWARD
   - 向前生成，从有效日期到终止日期。
 * - BACKWARD
   - 向后生成，从终止日期到有效日期。
  
.. note::
    **初始日期** or **结束日期** 必须时交易日期，不能被设置为日历中的节假日。

调整交易日
------------------------
.. function:: ModifiedBusinessDay(const Date& today, BusinessDayConvention convention, const Calendar& cal);

.. container:: custom

    **Parameters:**
        **today: Date**
            | 一个日期对象，表示当前日期。
        **convention: BusinessDayConvention**
            | 描述交易日约定规则的分类。
        **cal: Calendar**
            | 一个日历对象。

    **Returns: std::vector<Date>**
        返回调整后的交易日。
        

Example
^^^^^^^^^^^^^^^^^^
.. code-block:: c++

    #include "qlib/schedule.h"
    #include "qlib/enum.h"

    #define A_STOCK "[path]/Calendars/China.txt"
    
    int main()
    {
        auto begin_date = Date(2021, 3, 1);
        auto end_date = Date(2022, 3, 1);

        auto cal = Calendar(A_STOCK);

        auto p = Period(1, TimeUnit::MONTH);

        auto schedule_dates = Schedule(begin_date, end_date, p, BusinessDayConvention::FOLLOWING, 
                                        DateGenerationRule::FORWARD, cal, true, false);

        for (auto schedule_date: schedule_dates)
        {
		std::cout<< schedule_date << std::endl;
        }
 
    }

    //输出结果
        2021-03-01
        2021-04-01
        2021-05-06
        2021-06-01
        2021-07-01
        2021-08-02
        2021-09-01
        2021-10-08
        2021-11-01
        2021-12-01
        2022-01-04
        2022-02-07
        
   

