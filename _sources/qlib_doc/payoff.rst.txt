======================================
Payoff
======================================


.. class:: Payoff()

**Payoff** 被定义为描述期权买方和卖方所获得的净利润/亏损。

**Payoff** 的继类
=======================
Vanilla
-----------------------------

.. class:: Vanilla(const double strike, const OptionType o_type, const double participation_rate)

    
**Vanilla** 表示欧式香草期权乘一个参与率。

.. math:: vanilla_c = \text{participation} * \max(\text{spot} - \text{strike}, 0).

.. math:: vanilla_p = \text{participation} * \max(\text{strike} - \text{product}, 0).

.. image:: ../qlib_doc/doc_image/vanilla.png
   :width: 600
   :align: center


.. container:: custom

    **Parameters:**
        **strike: double**
            | 行权价格。
        **option_type: OptionType**
            | 期权类型, **CALL** or **PUT**.
        **participation_rate: double**
            | 该赔付的参与率。


Cash
-----------------------------

.. class:: Cash(const double cash_amount)


Payoff是一笔固定的现金。

.. image:: ../qlib_doc/doc_image/cash.png
   :width: 400
   :align: center


.. container:: custom

    **Parameters:**
        **cash_amount: double**
            | 一笔固定的现金。


Asset
-----------------------------

.. class:: Asset(const double strike, double participation_rate)

**Asset** 是在给定执行价格和参与率下购买资产。

.. image:: ../qlib_doc/doc_image/asset.png
   :width: 400
   :align: center


.. container:: custom

    **Parameters:**
        **strike: float**
            | 行权价格。
        **participation_rate: float**
            | 该Payoff的参与率。


CashOrNothing
-----------------------------

.. class:: CashOrNothing(const double cash_amount, const double strike, const OptionType option_type)

**CashOrNothing** 是一种二元现金期权的Payoff，要么支付固定金额的现金，要么什么都没有。

.. image:: ../qlib_doc/doc_image/cor.png
   :width: 600
   :align: center


.. container:: custom

    **Parameters:**
        **cash_amount: double**
            | 一笔固定金额的现金。
        **strike: float**
            | 行权价格。
        **option_type: enum**
            | 期权类型, **CALL** 或者 **PUT**.


AssetOrNothing
-----------------------------

.. class:: AssetOrNothing(const double strike, const OptionType option_type, const double participation_rate)

**AssetOrNothing** 是资产二元期权的payoff，要么支付标的资产的现货价格乘一个参与率，要么什么都不支付。

.. image:: ../qlib_doc/doc_image/aor.png
   :width: 600
   :align: center

.. container:: custom

    **Parameters:**
        **strike: float**
            | 行权价格。
        **option_type: enum**
            | 期权类型, **CALL** 或者 **PUT**.
        **participation_rate: float**
            | 该Payoff的参与率。


与 **payoff** 相关的操作
=======================================
**payoff** 支持与 **payoff** 的 +, -
----------------------------------------
.. code-block:: c++

    #include "qlib/payoff.h"

    int main()
    {
        auto payoff1 = Vanilla(100, OptionType::CALL, 1.0);
        auto payoff2 = Cash(10);
        
        //相加
        payoff1 + payoff2;

        //相减
        payoff1 - payoff2;
 
    }


**payoff** 支持与 **double** 类型的数字相乘
------------------------------------------------

.. code-block:: c++

    #include "qlib/payoff.h"
    
    int main()
    {
        auto payoff = Vanilla(100, OptionType::CALL, 1.0);
        
        // double * payoff
        2.2 * payoff;

        // payoff * double
        payoff * 2.2;
 
    }


**payoff** 支持与自身相减
-----------------------------
.. code-block:: c++

    #include "qlib/payoff.h"
    
    int main()
    {
        auto payoff = Vanilla(100, OptionType::CALL, 1.0);
        
        -payoff;

    }

Example 1
---------------------------
一个Call Spread由一个低行权价的香草看涨减去一个高行权价的香草看涨组成，Call Spread构建示例如下：

.. image:: ../qlib_doc/option_fig/call_spread.png
   :width: 600
   :align: center


.. code-block:: c++

    #include "qlib/payoff.h"
    
    int main()
    {
        auto call1 = Vanilla(100, OptionType::CALL, 1.0);
        auto call2 = Vanilla(110, OptionType::CALL, 1.0);

        auto call_spread = call1 - call2;

        std::vector<double> spots(31);
        std::iota(spots.begin(), spots.end(), 90);

        for (double spot:spots)
        {
            std::cout<< call_spread(spot)<<std::endl;
        }

    }

Example 2
---------------------------
一个Put Spread由一个高行权价的香草看跌减去一个低行权价的香草看跌组成，Put Spread构建示例如下：

.. image:: ../qlib_doc/option_fig/put_spread.png
   :width: 600
   :align: center

.. code-block:: c++

    #include "qlib/payoff.h"
    
    int main()
    {
        auto put1 = Vanilla(80, OptionType::PUT, 1.0);
        auto put2 = Vanilla(100, OptionType::PUT, 1.0);

        auto put_spread = put2 - put1;

        std::vector<double> spots(41);
        std::iota(spots.begin(), spots.end(), 70);

        for (double spot:spots)
        {
            std::cout<< put_spread(spot) <<std::endl;

        }

    }

