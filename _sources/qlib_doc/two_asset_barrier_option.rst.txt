===========================
双资产障碍期权
===========================

在双资产障碍期权中，其中一项标的资产 :math:`S_1` 会判断该期权是虚值或实值，而另一项资产 :math:`S_2` 则与障碍的触及程度挂钩。

.. function::  Pv(double spot1, double spot2, double rho, double r, double b1, double b2, double vol1, double vol2, double ttm, BarrierType b_type, double barrier, OptionType o_type, double strike);

.. container:: custom

    **Parameters:**
        **spot1: double**
            | 资产1的价格。
        **spot2: double**
            | 资产2的价格。
        **rho: double**
            | 两个挂钩标的之间的相关性。 
        **r: double**
            | 无风险利率。
        **b1: double**
            | 资产1的持仓成本。
        **b2: double**
            | 资产2的持仓成本。
        **vol1: double**
            | 资产1的波动率。
        **vol2: double**
            | 资产2的波动率。
        **ttm: double**
            | 到期时间。 
        **b_type: BarrierType**
            | 障碍类型，分为 **UP_IN**, **UP_OUT**, **DOWN_IN** 和 **DOWN_OUT**。
        **barrier: double**
            | 障碍价格。
        **o_type: OptionType**
            | 期权类型, **CALL** 或 **PUT**。
        **strike: double**
            | 行权价格。

    **Returns: double**
            | 返回双资产障碍期权的现值。


Example
^^^^^^^^^^^^^^^^^^

.. code-block:: c++

    #include <gtest/gtest.h>
    #include "qlib/analytical_engine/two_asset_barrier_option.h"

    TEST(TestAnalytical, TwoAssetBarrier){
        double spot1 = 100;
        double spot2 = 100;
        double rho = -0.5;
        double r = 0.08;
        double b1 = 0.08;
        double b2 = 0.08;
        double vol1 = 0.2;
        double vol2 = 0.2;
        double ttm = 0.5;
        double strike = 90;

        auto doc_pv = AnalyticalEngine::TwoAssetBarrier::Pv(spot1, spot2, rho, r, b1, b2, vol1, vol2, ttm,
                                                            BarrierType::DOWN_OUT, 95, OptionType::CALL, strike);
        auto uoc_pv = AnalyticalEngine::TwoAssetBarrier::Pv(spot1, spot2, rho, r, b1, b2, vol1, vol2, ttm,
                                                            BarrierType::UP_OUT, 105, OptionType::CALL, strike);
        auto dop_pv = AnalyticalEngine::TwoAssetBarrier::Pv(spot1, spot2, rho, r, b1, b2, vol1, vol2, ttm,
                                                            BarrierType::DOWN_OUT, 95, OptionType::PUT, strike);
        auto uop_pv = AnalyticalEngine::TwoAssetBarrier::Pv(spot1, spot2, rho, r, b1, b2, vol1, vol2, ttm,
                                                            BarrierType::UP_OUT, 105, OptionType::PUT, strike);

        EXPECT_NEAR(doc_pv, 3.2941, 1e-4) << "Down out call Pv calculation error";
        EXPECT_NEAR(uoc_pv, 4.6670, 1e-4) << "Up out call Pv calculation error";
        EXPECT_NEAR(dop_pv, 0.6184, 1e-4) << "Down out put Pv calculation error";
        EXPECT_NEAR(uop_pv, 0.0509, 1e-4) << "Up out put Pv calculation error";

    }
