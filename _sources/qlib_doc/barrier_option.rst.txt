======================================
标准障碍期权
======================================

:ref:`标准障碍期权<barrier_option>` 是一种收益取决于标的资产是否达到或超过预定价格的衍生品，分为向上/向下-敲出/敲入-看涨/看跌共 :math:`2^3=8` 种。

.. function:: Pv(double spot, double r, double b, double volatility, double ttm, BarrierType b_type, double barrier, OptionType o_type, double strike, double rebate, double dt);

.. container:: custom

    **Parameters:**
        **spot: double**
            | 标的价格。
        **r: double**
            | 无风险利率。 
        **b: double**
            | 持仓成本。
        **volatility: double**
            | 波动率。
        **ttm: double**
            | 到期时间。 
        **b_type: BarrierType**
            | 障碍类型，分为 **UP_IN**, **UP_OUT**, **DOWN_IN** 和 **DOWN_OUT**。
        **barrier: double**
            | 障碍价格。
        **o_type: OptionType**
            | 期权类型, **CALL** 或 **PUT**。
        **strike: double**
            | 行权价格。
        **rebate: double**
            | 现金赔付如果从未敲入或敲出。
        **dt: double**
            | 对于离散障碍期权，dt以年为单位的观察日之间的间隔。如果是连续观察，则 **dt = 0** 。

    **Returns: double**
        | 返回障碍期权的现值。


Example
----------------------

.. code-block:: c++

    #include <gtest/gtest.h>
    #include "qlib/analytical_engine/barrier_option.h"

    TEST(TestAnalytical, BarrierOption)
    {
        double spot = 100;
        double r = 0.08;
        double b = 0.04;
        double vol = 0.25;
        double ttm = 0.5;
        double strike = 100;
        double rebate = 3.0;
        double down_barrier = 100;
        double up_barrier = 105;
        
        auto uoc_pv = AnalyticalEngine::BarrierOption::Pv(spot, r,b, vol, ttm,
			BarrierType::UP_OUT, up_barrier, OptionType::CALL, strike, rebate);
                
        auto uic_pv = AnalyticalEngine::BarrierOption::Pv(spot, r,b, vol, ttm,
			BarrierType::UP_IN, up_barrier, OptionType::CALL, strike, rebate);

        auto doc_pv = AnalyticalEngine::BarrierOption::Pv(spot, r,b, vol, ttm,
			BarrierType::DOWN_OUT, down_barrier, OptionType::CALL, strike, rebate);
        
        auto dic_pv = AnalyticalEngine::BarrierOption::Pv(spot, r,b, vol, ttm,
			BarrierType::DOWN_IN, down_barrier, OptionType::CALL, strike, rebate);

        EXPECT_NEAR(uoc_pv, 2.3580, 1e-4) << "Up out call Pv calculation error";
        EXPECT_NEAR(uic_pv, 8.4482, 1e-4) << "Up in call Pv calculation error";
        EXPECT_NEAR(doc_pv, 3.0, 1e-4) << "Down out call Pv calculation error";
        EXPECT_NEAR(dic_pv, 7.8494, 1e-4) << "Down in call Pv calculation error";
    }
   
